// Generated by CoffeeScript 1.9.1
var angular, io, ngmaterial, reporterApp;

angular = require("angular");

require("angular-animate");

require("angular-aria");

require("angular-treemendous");

ngmaterial = require("angular-material");

io = require("socket.io-client");

require("./index.css");

reporterApp = angular.module("reporterApp", [ngmaterial, "treemendous"]);

reporterApp.controller("appCtrl", function($scope, $mdToast) {
  var addtotree, levels, parse, reload, socket;
  socket = io();
  $scope.data = [];
  $scope.tree = {
    branches: []
  };
  $scope.failed = [];
  levels = [];
  $scope.count = 0;
  $scope.tests = 0;
  socket.on("reload", function() {
    console.log("reloading");
    return document.location.reload();
  });
  $scope.splitNewLine = function(string) {
    return string.split("\n");
  };
  parse = function(data) {
    var count, difference, i, identifier, len, lvl, newlevels;
    if (data && data[0]) {
      if (data[0] === "start") {
        $scope.data = [];
        $scope.failed = [];
        count = data[0][1].total;
      } else if (data[0] === "fail") {
        $scope.failed.push(data[1]);
      } else if (data[0] === "pass") {
        $scope.data.push(data[1]);
      } else if (data[0] === "end") {
        $scope.count = $scope.data.length;
        $scope.tests = data[1].tests;
        $mdToast.show($mdToast.simple().content('Test finished'));
      }
      if (data[0] === "fail" || data[0] === "pass") {
        identifier = data[1].fullTitle.replace(data[1].title, "").replace(/\s+$/, "");
        difference = identifier;
        newlevels = [];
        for (i = 0, len = levels.length; i < len; i++) {
          lvl = levels[i];
          if (identifier.indexOf(lvl) > -1) {
            difference = difference.replace(lvl, "").replace(/^s+/, "");
            newlevels.push(lvl);
          }
        }
        if (difference) {
          newlevels.push(difference);
        }
        data[1].levels = newlevels;
        levels = newlevels.slice();
        return data[1];
      }
    }
  };
  addtotree = function(data) {
    var branch, current, found, i, j, last, len, len1, lvl, newBranch, ref, ref1;
    if (data.levels) {
      current = $scope.tree;
      last = null;
      ref = data.levels;
      for (i = 0, len = ref.length; i < len; i++) {
        lvl = ref[i];
        found = false;
        ref1 = current.branches;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          branch = ref1[j];
          if (branch.name === lvl) {
            last = current;
            current = branch;
            found = true;
            break;
          }
        }
        if (!found) {
          last = current;
          newBranch = {
            name: lvl,
            branches: [],
            leaves: [],
            duration: 0
          };
          current.branches.push(newBranch);
          current = newBranch;
        }
      }
      current.leaves.push(data);
      return current.duration += data.duration;
    }
  };
  reload = function() {
    $scope.data = [];
    $scope.tree = {
      branches: []
    };
    return socket.emit("data");
  };
  reload();
  socket.on("data", function(data) {
    var dataChunk, i, len, parsed;
    for (i = 0, len = data.length; i < len; i++) {
      dataChunk = data[i];
      parsed = parse(dataChunk);
      if (parsed) {
        addtotree(parsed);
      }
    }
    return $scope.$$phase || $scope.$digest();
  });
  socket.on("dataChunk", function(dataChunk) {
    var parsed;
    parsed = parse(dataChunk);
    if (parsed) {
      addtotree(parsed);
    }
    return $scope.$$phase || $scope.$digest();
  });
  return socket.on("dataConsole", function(dataConsole) {
    return console.log("From console: " + dataConsole);
  });
});

reporterApp.filter("hasProperty", function() {
  return function(array, property) {
    var i, len, obj, result;
    if (property) {
      result = [];
      for (i = 0, len = array.length; i < len; i++) {
        obj = array[i];
        if (obj[property]) {
          result.push(obj);
        }
      }
      return result;
    } else {
      return array;
    }
  };
});
